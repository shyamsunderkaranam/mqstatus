angular.module("RDash",["ui.bootstrap","ui.router","ngCookies"]);
"use strict";angular.module("RDash").config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/"),t.state("index",{url:"/",templateUrl:"templates/dashboard.html"}).state("tables",{url:"/tables",templateUrl:"templates/tables.html"})}]);
function rdLoading(){var d={restrict:"AE",template:'<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'};return d}angular.module("RDash").directive("rdLoading",rdLoading);
function rdWidgetBody(){var d={requires:"^rdWidget",scope:{loading:"@?",classes:"@?"},transclude:!0,template:'<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',restrict:"E"};return d}angular.module("RDash").directive("rdWidgetBody",rdWidgetBody);
function rdWidgetFooter(){var e={requires:"^rdWidget",transclude:!0,template:'<div class="widget-footer" ng-transclude></div>',restrict:"E"};return e}angular.module("RDash").directive("rdWidgetFooter",rdWidgetFooter);
function rdWidgetTitle(){var e={requires:"^rdWidget",scope:{title:"@",icon:"@"},transclude:!0,template:'<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',restrict:"E"};return e}angular.module("RDash").directive("rdWidgetHeader",rdWidgetTitle);
function rdWidget(){var d={transclude:!0,template:'<div class="widget" ng-transclude></div>',restrict:"EA"};return d}angular.module("RDash").directive("rdWidget",rdWidget);
function AlertsCtrl(e){e.alerts=[{type:"success",msg:"Thanks for visiting! Feel free to create pull requests to improve the dashboard!"},{type:"danger",msg:"Found a bug? Create an issue with as many details as you can."}],e.addAlert=function(){e.alerts.push({msg:"Another alert!"})},e.closeAlert=function(t){e.alerts.splice(t,1)}}angular.module("RDash").controller("AlertsCtrl",["$scope",AlertsCtrl]);
function MasterCtrl(t,e,r,h){var o=992;t.getWidth=function(){return window.innerWidth},t.$watch(t.getWidth,function(g){t.toggle=g>=o?angular.isDefined(e.get("toggle"))?e.get("toggle")?!0:!1:!0:!1}),t.toggleSidebar=function(){t.toggle=!t.toggle,e.put("toggle",t.toggle)},window.onresize=function(){t.$apply()}
	t.brokerOptions = false;
	t.valueReveal = false;
	r.selectedBrokerName = "";
	t.brokerlist = [
	  {"id":1,"brokerName":"FMQINST1"},
	  {"id":2,"brokerName":"FMQINST2"}
	  ];
	t.hostName='http://localhost:';
	t.portNumber=8090;
	t.chnlApiURL='';
	t.qApiURL = '';
	t.propertiesShown = false;
	t.queueDetails='';
	t.channelStats='';
	t.openChn = false;
	t.openQM = false;
	t.openTroub = false;
	r.problemQueues = [];
	r.problemChannels = '';
	r.pFlag=false;
	t.propertyValue = [];
	t.showQueueDropDwn=false;

	t.typeOfQueues = [
		{id : 0, queueType : "Local"},
		{id : 1, queueType : "Alias"}
	];
	t.callAliasQueue = function (){
		t.qApiURL = '/listofAliasqueue';
		h.get('http://localhost:8090/listofAliasqueue')
		.then(function(response) {
			t.propertyValue = response.data;
		});
		/*t.propertyValue = [
			{"qname":"AliasQueue1","InhibitPut":false,"Description":"","Sharable":true,"OpenInputCount":1,"InhibitGet":true,"TriggerControl":false,"MaximumMessageLength":4194304,"OpenOutputCount":0,"CurrentDepth":0,"MaximumDepth":5000},
			{"qname":"AliasQueue2","InhibitPut":false,"Description":"","Sharable":true,"OpenInputCount":1,"InhibitGet":true,"TriggerControl":false,"MaximumMessageLength":4194304,"OpenOutputCount":0,"CurrentDepth":0,"MaximumDepth":5000}
		]*/
	};
	t.callLocalQueue = function (){
		t.qApiURL = '/listofqueue';
		h.get('http://localhost:8090/listofLocalqueue')
		.then(function(response) {
			t.propertyValue = response.data;
		});
		/*t.propertyValue = [
			{"qname":"LocalQueue1","InhibitPut":false,"Description":"","Sharable":true,"OpenInputCount":1,"InhibitGet":true,"TriggerControl":false,"MaximumMessageLength":4194304,"OpenOutputCount":0,"CurrentDepth":0,"MaximumDepth":5000},
			{"qname":"LocalQueue2","InhibitPut":false,"Description":"","Sharable":true,"OpenInputCount":1,"InhibitGet":true,"TriggerControl":false,"MaximumMessageLength":4194304,"OpenOutputCount":0,"CurrentDepth":0,"MaximumDepth":5000}
		];*/
	};
	t.callQueueSubtype = function(id){
		console.log("Queue type selected is : " +id);
		t.showQueueDropDwn=true;
		if (id == "Local"){
			t.callLocalQueue();	
		}else if (id == "Alias"){
			t.callAliasQueue();
		}else{
			console.log("Type of Queue selected is wrong");
		}
	};
	


	r.troubledQueues = function (){
		//t.findQueueValues();
		for(var i=0,j=0;i<t.propertyValue.length;i++){
			if(t.propertyValue[i].InhibitPut == true || t.propertyValue[i].InhibitGet == true || t.propertyValue[i].OpenInputCount == 1 ){
				r.problemQueues[j] = t.propertyValue[i];
				j=j+1;
				r.pFlag=true;
			}
		}
	};

	t.openMainRow = function(id){
		t.brokerOptions = true;
		t.valueReveal = false;
		r.selectedBrokerName = t.brokerlist[id-1].brokerName;
		t.selectedRow = null;
		t.openChn = false;
		t.openQM = false;
		t.openTroub = false;
	 console.log("You clicked on Broker "+t.brokerlist[id-1].brokerName+"t.valueReveal"+t.valueReveal);
	};

	t.openQueue = function(){
		t.valueReveal = true;
		t.openQM = true;
		//h.get(t.hostName+t.portNumber+r.selectedBrokerName+t.qApiURL)
		/*h.get(t.hostName+":"+t.portNumber+"/FMQINST1/"+t.qApiURL)
		.then(function(response) {
			t.propertyValue = [response.data];
		   
	});*/
		//console.log("valueReveal ::"+t.valueReveal+"r.selectedBrokerName" + r.selectedBrokerName);
		
		t.openChn = false;
		t.channelStats = null;
		t.openTroub = false;
		r.pFlag=false;
		

		console.log(t.hostName+":"+t.portNumber+"//"+r.selectedBrokerName+"//"+t.apiURL);
	};

	t.openTroubleShoot = function(){
		t.valueStats = true;
		t.openQM = false;

		/*h.get(t.hostName+t.portNumber+r.selectedBrokerName+t.qApiURL)
		.then(function(response) {
			t.myJson3 = [response.data];
		   
	});*/
		t.propertyValue = null;
		t.queueDetails = null;
		t.valueReveal = true;
		t.propertiesShown = false;
		t.openChn = false;
		t.channelStats = null;
		t.openTroub = true;
		r.troubledQueues();
		console.log(r.problemQueues);
	};

	t.openChannel = function(){
		t.openChn = true;
		t.openQM = false;
		t.channelStatus = '';
		t.chnlApiURL = "/channelStatus";
		t.url=t.hostName+t.portNumber+t.chnlApiURL;
		console.log(t.url);
		//t.channelStats = {"DYNATRACE.SVRCONN":"RUNNING/INACTIVE","TO.FMQINST1":"RUNNING/INACTIVE","MQPREPRDSUP.SVRCONN":"RUNNING/INACTIVE"};

		h.get(t.url)
		.then(function(response) {
			t.channelStats = [response.data];
		   
		});
		t.propertyValue = null;
		t.queueDetails = null;
		t.valueReveal = true;
		t.propertiesShown = false;
		t.openTroub = false;
		
		for(var i=0;i<t.channelStats.length;i++){
			if(t.channelStats[i] == 'STOPPED' ){
				r.problemChannels[i] = t.channelStats[i]
			}
		}
		console.log(t.channelStats);
	};

	t.openListener = function(){
		t.valueReveal = true;
		/*h.get(t.hostName+t.portNumber+r.selectedBrokerName+t.apiURL)
		.then(function(response) {
			t.myJson3 = [response.data];
		   
	});*/
		console.log("valueReveal ::"+t.valueReveal+"r.selectedBrokerName" + r.selectedBrokerName);
	};
	t.openEgStatus = function(){
		t.valueReveal = true;
		/*h.get(t.hostName+t.portNumber+r.selectedBrokerName+t.apiURL)
		.then(function(response) {
			t.myJson3 = [response.data];
		   
	});*/
		console.log("valueReveal ::"+t.valueReveal+"r.selectedBrokerName" + r.selectedBrokerName);
	};
	
	t.queueDesc = function (id){
		t.propertiesShown = true;
		//t.queueDetails=t.propertyValue[id];
		t.qApiURL = '/listofAliasqueue';
		h.get('http://localhost:8090//getStatistics/'+t.propertyValue[id])
		.then(function(response) {
		t.queueDetails = response.data;});
		t.selectedRow = id;
		console.log(t.propertyValue[id]+" "+t.queueDetails);
		
	};

	/* t.openModal = function(id1) {
        this.modalService.open(id1);
	};
	open= function(id) {
        // open modal specified by id
        let modal = _.findWhere(this.modals, { id: id });
        modal.open();
    }; */ 

	//t.bproperties = [{"property1":"Queue","property2":"Agent","property3":"Channel","property4":"Listener","property4":"EG Status"}];
	
	//t.queueList = [{"property1":"Queue1","property2":"Queue2","property3":"Queue3","property4":"MQ","property5":"Queue5","property6":"Queue6"}];


}
angular.module("RDash").controller("MasterCtrl",["$scope","$cookieStore","$rootScope","$http",MasterCtrl
  ]);

  angular.module("RDash").filter('keyFilter', function() {
    return function(x) {
        var txt = "";
        switch(x){
			case "InhibitPut":
			txt="Incoming flow Stopped ?";
			break;

			case "InhibitGet":
			txt="Outgoing flow Stopped ?";
			break;

			case "qName":
			txt="Queue Name";
			break;

			case "Description":
			txt="Queue Description";
			break;
			
			case "Sharable":
			txt="Is Queue Shared ?";
			break;
			
			case "OpenInputCount":
			txt="No of Applns reading this Queue";
			break;
			
			case "MaximumMessageLength":
			txt="Maximum Message Length";
			break;

			case "OpenOutputCount":
			txt="No of Msgs currently processing from Queue";
			break;
			
			case "CurrentDepth":
			txt="No of messages stuck in the Queue";
			break;

			case "MaximumDepth":
			txt="Maximum Messages can be stored";
			break;

			case "TriggerControl":
			txt = "TriggerControl";
			break;
			
			default:
			txt = x;

		}
        return txt;
    };
});

